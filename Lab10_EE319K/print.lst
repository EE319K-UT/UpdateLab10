


ARM Macro Assembler    Page 1 


    1 00000000         ; Print.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         ; Runs on LM4F120 or TM4C123
    5 00000000         ; EE319K lab 7 device driver for any LCD
    6 00000000         ;
    7 00000000         ; As part of Lab 7, students need to implement these LCD
                       _OutDec and LCD_OutFix
    8 00000000         ; This driver assumes two low-level LCD functions
    9 00000000         ; ST7735_OutChar   outputs a single 8-bit ASCII characte
                       r
   10 00000000         ; ST7735_OutString outputs a null-terminated string 
   11 00000000 00000000 
                       original
                               EQU              0
   12 00000000 00000004 
                       flexOriginal
                               EQU              4
   13 00000000 00000008 
                       ten1    EQU              8
   14 00000000 0000000C 
                       lowRemainder1
                               EQU              12
   15 00000000 00000010 
                       lowRemainder2
                               EQU              16
   16 00000000 00000014 
                       lowRemainder3
                               EQU              20
   17 00000000 00000018 
                       countOfNums
                               EQU              24
   18 00000000         
   19 00000000                 IMPORT           ST7735_OutChar
   20 00000000                 IMPORT           ST7735_OutString
   21 00000000                 EXPORT           LCD_OutDec
   22 00000000                 EXPORT           LCD_OutFix
   23 00000000         
   24 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   25 00000000                 THUMB
   26 00000000         
   27 00000000         
   28 00000000 0000270F 
                       allNines
                               DCD              9999
   29 00000004         
   30 00000004         
   31 00000004 0000270F 
                       nines   DCD              9999
   32 00000008         
   33 00000008         ;-----------------------LCD_OutDec----------------------
                       -
   34 00000008         ; Output a 32-bit number in unsigned decimal format
   35 00000008         ; Input: R0 (call by value) 32-bit unsigned number
   36 00000008         ; Output: none
   37 00000008         ; Invariables: This function must not permanently modify



ARM Macro Assembler    Page 2 


                        registers R4 to R11
   38 00000008         LCD_OutDec
   39 00000008         ; copy/paste Lab 7 solution here
   40 00000008         
   41 00000008         ;Binding
   42 00000008         
   43 00000008 00000000 
                       num     EQU              0           ; This is a copy of
                                                             the input
   44 00000008 00000004 
                       subtractee
                               EQU              4           ; This is num/10 
   45 00000008 00000008 
                       result  EQU              8           ; result = num - su
                                                            btractee
   46 00000008 0000000C 
                       D_0     EQU              12
   47 00000008 00000010 
                       D_1     EQU              16
   48 00000008 00000014 
                       D_2     EQU              20
   49 00000008 00000018 
                       D_3     EQU              24
   50 00000008 0000001C 
                       D_4     EQU              28
   51 00000008 00000020 
                       D_5     EQU              32
   52 00000008 00000024 
                       D_6     EQU              36
   53 00000008 00000028 
                       D_7     EQU              40
   54 00000008 0000002C 
                       D_8     EQU              44
   55 00000008 00000030 
                       D_9     EQU              48
   56 00000008 00000034 
                       flag    EQU              52          ; zero if all MSBs 
                                                            thus far have been 
                                                            0
   57 00000008 00000035 
                       index   EQU              53
   58 00000008 00000036 
                       ten     EQU              54
   59 00000008 00000037 
                       arrayFrame
                               EQU              55
   60 00000008         
   61 00000008        0 
                       n       RN               0
   62 00000008 B53E            PUSH             {R1, R2, R3, R4, R5, LR}
   63 0000000A         
   64 0000000A         ;Allocation
   65 0000000A B090            SUB              SP, #64
   66 0000000C         
   67 0000000C F04F 0100       MOV              R1, #0      ; Initializing flag
                                                             to 0
   68 00000010 F88D 1034       STRB             R1, [SP, #flag] ; 0 means all M
                                                            SBs thus far have b
                                                            een 0, 1 is if an a



ARM Macro Assembler    Page 3 


                                                            ctually significant
                                                             bit has been displ
                                                            ayed
   69 00000014         
   70 00000014 F88D 1035       STRB             R1, [SP, #index] ; Initializing
                                                             index to 0 (counts
                                                             number of digits)
   71 00000018         
   72 00000018 F04F 010C       MOV              R1, #12
   73 0000001C 4469            ADD              R1, SP
   74 0000001E F8CD 1037       STR              R1, [SP, #arrayFrame] ; Setting
                                                             array frame to mem
                                                            ory location of D_0
                                                             in stack  
   75 00000022         
   76 00000022 F04F 010A       MOV              R1, #10     ; Initializing ten 
                                                            to 10
   77 00000026 F88D 1036       STRB             R1, [SP, #ten]
   78 0000002A         
   79 0000002A 9000            STR              n, [SP, #num] ; Initializing nu
                                                            m to R0 (input)
   80 0000002C         
   81 0000002C 9001            STR              n, [SP, #subtractee] ; Initiali
                                                            zing subtractee to 
                                                            R0 (input)
   82 0000002E         
   83 0000002E         loopStoreArray
   84 0000002E 9900            LDR              R1, [SP, #num] ; subtractee = (
                                                            n/10) * 10
   85 00000030 F89D 2036       LDRB             R2, [SP, #ten]
   86 00000034 FBB1 F1F2       UDIV             R1, R2
   87 00000038 FB01 F102       MUL              R1, R2
   88 0000003C 9101            STR              R1, [SP, #subtractee]
   89 0000003E         
   90 0000003E 9A00            LDR              R2, [SP, #num]
   91 00000040 EBA2 0301       SUB              R3, R2, R1
   92 00000044 9302            STR              R3, [SP, #result] ; result = nu
                                                            m - subtractee (so 
                                                            now result has the 
                                                            digit[i] value)
   93 00000046         
   94 00000046 9900            LDR              R1, [SP, #num]
   95 00000048 F89D 2036       LDRB             R2, [SP, #ten]
   96 0000004C FBB1 F1F2       UDIV             R1, R2
   97 00000050 9100            STR              R1, [SP, #num] ; n= n/10 (chang
                                                            ing n for next loop
                                                            )
   98 00000052         
   99 00000052 9B02            LDR              R3, [SP, #result]
  100 00000054 F103 0330       ADD              R3, #0x30   ; Adding 0x30 to re
                                                            sult (to turn into 
                                                            ASCII)
  101 00000058 9302            STR              R3, [SP, #result]
  102 0000005A         
  103 0000005A         ;LDR  R0, [SP, #result]
  104 0000005A         ;BL  ST7735_OutChar
  105 0000005A         
  106 0000005A 9902            LDR              R1, [SP, #result] ; Putting res
                                                            ult into correct in



ARM Macro Assembler    Page 4 


                                                            dex of array
  107 0000005C F8DD 2037       LDR              R2, [SP, #arrayFrame]
  108 00000060 F89D 3035       LDRB             R3, [SP, #index]
  109 00000064 F04F 0404       MOV              R4, #4      ; Multiply index by
                                                             4 because each dig
                                                            it value is 32 bits
                                                             (increment 4 bytes
                                                            )
  110 00000068 FB03 F304       MUL              R3, R4
  111 0000006C 50D1            STR              R1, [R2, R3]
  112 0000006E         
  113 0000006E F89D 1035       LDRB             R1, [SP, #index] 
                                                            ;Incrementing index
                                                            
  114 00000072 F101 0101       ADD              R1, #1
  115 00000076 F88D 1035       STRB             R1, [SP, #index]
  116 0000007A 290A            CMP              R1, #10     ; Once index reache
                                                            s 10, all values st
                                                            ored thusfar start 
                                                            displaying
  117 0000007C D1D7            BNE              loopStoreArray ; If less then 1
                                                            0, then go to next 
                                                            digit
  118 0000007E         
  119 0000007E         
  120 0000007E         ;DISPLAY CHARACTERS NOW BASED ON ITEMS STORED INTO ARRAY
                       
  121 0000007E F89D 0030       LDRB             R0, [SP, #D_9]
  122 00000082 2830            CMP              R0, #0x30   ; If MSB is ASCII z
                                                            ero, then display
  123 00000084 D007            BEQ              Skip9
  124 00000086 F7FF FFFE       BL               ST7735_OutChar
  125 0000008A F89D 1034       LDRB             R1, [SP, #flag] ; If bit is not
                                                             zero, then set fla
                                                            g ie always display
                                                             all following digi
                                                            ts
  126 0000008E F04F 0101       MOV              R1, #1      ; (We just don't wa
                                                            nt Most significant
                                                             zeroes because the
                                                            y have no significa
                                                            nce)
  127 00000092 F88D 1034       STRB             R1, [SP, #flag]
  128 00000096         
  129 00000096         Skip9
  130 00000096 F89D 002C       LDRB             R0, [SP, #D_8]
  131 0000009A F89D 1034       LDRB             R1, [SP, #flag] 
                                                            ; If flag is 1, ie 
                                                            
  132 0000009E 2901            CMP              R1, #1      ; If any previous d
                                                            igit was nonzero, d
                                                            isplay current digi
                                                            t, even if it is ze
                                                            ro
  133 000000A0 D001            BEQ              noPass8
  134 000000A2 2830            CMP              R0, #0x30   ; If flag not set (
                                                            previous digits wer
                                                            e all zero) and cur
                                                            rent digit is zero,



ARM Macro Assembler    Page 5 


                                                            
  135 000000A4 D007            BEQ              Skip8       ; then don't displa
                                                            y
  136 000000A6         noPass8
  137 000000A6 F7FF FFFE       BL               ST7735_OutChar
  138 000000AA F89D 1034       LDRB             R1, [SP, #flag]
  139 000000AE F04F 0101       MOV              R1, #1
  140 000000B2 F88D 1034       STRB             R1, [SP, #flag]
  141 000000B6         
  142 000000B6         Skip8
  143 000000B6 F89D 0028       LDRB             R0, [SP, #D_7]
  144 000000BA F89D 1034       LDRB             R1, [SP, #flag]
  145 000000BE 2901            CMP              R1, #1
  146 000000C0 D001            BEQ              noPass7
  147 000000C2 2830            CMP              R0, #0x30
  148 000000C4 D007            BEQ              Skip7
  149 000000C6         noPass7
  150 000000C6 F7FF FFFE       BL               ST7735_OutChar
  151 000000CA F89D 1034       LDRB             R1, [SP, #flag]
  152 000000CE F04F 0101       MOV              R1, #1
  153 000000D2 F88D 1034       STRB             R1, [SP, #flag]
  154 000000D6         
  155 000000D6         Skip7
  156 000000D6 F89D 0024       LDRB             R0, [SP, #D_6]
  157 000000DA F89D 1034       LDRB             R1, [SP, #flag]
  158 000000DE 2901            CMP              R1, #1
  159 000000E0 D001            BEQ              noPass6
  160 000000E2 2830            CMP              R0, #0x30
  161 000000E4 D007            BEQ              Skip6
  162 000000E6         noPass6
  163 000000E6 F7FF FFFE       BL               ST7735_OutChar
  164 000000EA F89D 1034       LDRB             R1, [SP, #flag]
  165 000000EE F04F 0101       MOV              R1, #1
  166 000000F2 F88D 1034       STRB             R1, [SP, #flag]
  167 000000F6         
  168 000000F6         Skip6
  169 000000F6 F89D 0020       LDRB             R0, [SP, #D_5]
  170 000000FA F89D 1034       LDRB             R1, [SP, #flag]
  171 000000FE 2901            CMP              R1, #1
  172 00000100 D001            BEQ              noPass5
  173 00000102 2830            CMP              R0, #0x30
  174 00000104 D007            BEQ              Skip5
  175 00000106         noPass5
  176 00000106 F7FF FFFE       BL               ST7735_OutChar
  177 0000010A F89D 1034       LDRB             R1, [SP, #flag]
  178 0000010E F04F 0101       MOV              R1, #1
  179 00000112 F88D 1034       STRB             R1, [SP, #flag]
  180 00000116         
  181 00000116         Skip5
  182 00000116 F89D 001C       LDRB             R0, [SP, #D_4]
  183 0000011A F89D 1034       LDRB             R1, [SP, #flag]
  184 0000011E 2901            CMP              R1, #1
  185 00000120 D001            BEQ              noPass4
  186 00000122 2830            CMP              R0, #0x30
  187 00000124 D007            BEQ              Skip4
  188 00000126         noPass4
  189 00000126 F7FF FFFE       BL               ST7735_OutChar
  190 0000012A F89D 1034       LDRB             R1, [SP, #flag]
  191 0000012E F04F 0101       MOV              R1, #1



ARM Macro Assembler    Page 6 


  192 00000132 F88D 1034       STRB             R1, [SP, #flag]
  193 00000136         
  194 00000136         Skip4
  195 00000136 F89D 0018       LDRB             R0, [SP, #D_3]
  196 0000013A F89D 1034       LDRB             R1, [SP, #flag]
  197 0000013E 2901            CMP              R1, #1
  198 00000140 D001            BEQ              noPass3
  199 00000142 2830            CMP              R0, #0x30
  200 00000144 D007            BEQ              Skip3
  201 00000146         noPass3
  202 00000146 F7FF FFFE       BL               ST7735_OutChar
  203 0000014A F89D 1034       LDRB             R1, [SP, #flag]
  204 0000014E F04F 0101       MOV              R1, #1
  205 00000152 F88D 1034       STRB             R1, [SP, #flag]
  206 00000156         
  207 00000156         Skip3
  208 00000156 F89D 0014       LDRB             R0, [SP, #D_2]
  209 0000015A F89D 1034       LDRB             R1, [SP, #flag]
  210 0000015E 2901            CMP              R1, #1
  211 00000160 D001            BEQ              noPass2
  212 00000162 2830            CMP              R0, #0x30
  213 00000164 D007            BEQ              Skip2
  214 00000166         noPass2
  215 00000166 F7FF FFFE       BL               ST7735_OutChar
  216 0000016A F89D 1034       LDRB             R1, [SP, #flag]
  217 0000016E F04F 0101       MOV              R1, #1
  218 00000172 F88D 1034       STRB             R1, [SP, #flag]
  219 00000176         
  220 00000176         Skip2
  221 00000176 F89D 0010       LDRB             R0, [SP, #D_1]
  222 0000017A F89D 1034       LDRB             R1, [SP, #flag]
  223 0000017E 2901            CMP              R1, #1
  224 00000180 D001            BEQ              noPass1
  225 00000182 2830            CMP              R0, #0x30
  226 00000184 D007            BEQ              Skip1
  227 00000186         noPass1
  228 00000186 F7FF FFFE       BL               ST7735_OutChar
  229 0000018A F89D 1034       LDRB             R1, [SP, #flag]
  230 0000018E F04F 0101       MOV              R1, #1
  231 00000192 F88D 1034       STRB             R1, [SP, #flag]
  232 00000196         
  233 00000196         Skip1
  234 00000196 F89D 000C       LDRB             R0, [SP, #D_0]
  235 0000019A F7FF FFFE       BL               ST7735_OutChar
  236 0000019E         
  237 0000019E B010            ADD              SP, #64
  238 000001A0 E8BD 403E       POP              {R1, R2, R3, R4, R5, LR}
  239 000001A4         
  240 000001A4         
  241 000001A4 4770            BX               LR
  242 000001A6 4770            BX               LR
  243 000001A8         ;* * * * * * * * End of LCD_OutDec * * * * * * * *
  244 000001A8         
  245 000001A8         ; -----------------------LCD _OutFix--------------------
                       --
  246 000001A8         ; Output characters to LCD display in fixed-point format
                       
  247 000001A8         ; unsigned decimal, resolution 0.001, range 0.000 to 9.9
                       99



ARM Macro Assembler    Page 7 


  248 000001A8         ; Inputs:  R0 is an unsigned 32-bit number
  249 000001A8         ; Outputs: none
  250 000001A8         ; E.g., R0=0,    then output "0.000 "
  251 000001A8         ;       R0=3,    then output "0.003 "
  252 000001A8         ;       R0=89,   then output "0.089 "
  253 000001A8         ;       R0=123,  then output "0.123 "
  254 000001A8         ;       R0=9999, then output "9.999 "
  255 000001A8         ;       R0>9999, then output "*.*** "
  256 000001A8         ; Invariables: This function must not permanently modify
                        registers R4 to R11
  257 000001A8         LCD_OutFix
  258 000001A8         ; copy/paste Lab 7 solution here
  259 000001A8         
  260 000001A8 E92D 5FF0       PUSH             {R4-R11, R12, LR} ;pushes all u
                                                            sed registers to st
                                                            ack because I need 
                                                            lots of local varia
                                                            bles D:
  261 000001AC B088            ADD              SP, #-32
  262 000001AE         
  263 000001AE         
  264 000001AE 9000            STR              R0, [SP, #original] ; stores th
                                                            e R0 into a local v
                                                            ariable in the stac
                                                            k
  265 000001B0 9800            LDR              R0, [SP, #original] ;reloads R0
                                                             as a local variabl
                                                            e
  266 000001B2         
  267 000001B2 F001 0100       AND              R1, #0x0    ;initializes R1 to 
                                                            zero to be used as 
                                                            a temp storage of R
                                                            0 original input 
  268 000001B6 4401            ADD              R1, R0, R1
  269 000001B8 9101            STR              R1, [SP,#flexOriginal] ;stores 
                                                            R1 as a local varia
                                                            ble in the stack
  270 000001BA 9901            LDR              R1, [SP,#flexOriginal] ;reloads
                                                             R1 as a local vari
                                                            ale in the stack
  271 000001BC         
  272 000001BC         
  273 000001BC F002 0200       AND              R2, #0x0    ;R2 is the number 1
                                                            0 that is divisor f
                                                            or the original inp
                                                            ut
  274 000001C0 F04F 020A       MOV              R2, #10
  275 000001C4 9202            STR              R2, [SP, #ten1]
  276 000001C6 9A02            LDR              R2, [SP, #ten1]
  277 000001C8         
  278 000001C8 F003 0300       AND              R3, #0x0
  279 000001CC 9303            STR              R3, [SP, #lowRemainder1]
  280 000001CE 9B03            LDR              R3, [SP, #lowRemainder1]
  281 000001D0         
  282 000001D0 F004 0400       AND              R4, #0x0
  283 000001D4 9404            STR              R4, [SP, #lowRemainder2]
  284 000001D6 9C04            LDR              R4, [SP, #lowRemainder2]
  285 000001D8         
  286 000001D8 F005 0500       AND              R5, #0x0



ARM Macro Assembler    Page 8 


  287 000001DC 9505            STR              R5, [SP, #lowRemainder3]
  288 000001DE 9D05            LDR              R5, [SP, #lowRemainder3]
  289 000001E0         
  290 000001E0         ;test case - decimal
  291 000001E0         ;this tests if I can output the decimal point and it doe
                       s
  292 000001E0         ;MOV R0, #0x2E    
  293 000001E0         ;B ST7735_OutChar
  294 000001E0         ;end of test case - decimal
  295 000001E0         
  296 000001E0         
  297 000001E0         checkIfInputGreaterThan9999
  298 000001E0 493B            LDR              R1, =allNines
  299 000001E2 680A            LDR              R2, [R1]
  300 000001E4 4290            CMP              R0, R2
  301 000001E6 D856            BHI              allStars
  302 000001E8 9A02            LDR              R2, [SP, #ten1]
  303 000001EA 9901            LDR              R1, [SP, #flexOriginal]
  304 000001EC E00A            B                GreaterThanTen
  305 000001EE         
  306 000001EE         OutPutDecimal
  307 000001EE B50B            PUSH             {R0, R1, R3, LR}
  308 000001F0         
  309 000001F0 F04F 002E       MOV              R0, #0x2E   ;moves ASCII value 
                                                            of decimal into R0
  310 000001F4 F000 00FF       AND              R0, #0x0FF  ;bitmask to want on
                                                            ly 8 bits
  311 000001F8 F7FF FFFE       BL               ST7735_OutChar
  312 000001FC 9800            LDR              R0, [SP, #original]
  313 000001FE 9901            LDR              R1, [SP, #flexOriginal]
  314 00000200 9B03            LDR              R3, [SP, #lowRemainder1]
  315 00000202         
  316 00000202 BD0B            POP              {R0, R1, R3, PC}
  317 00000204         
  318 00000204         GreaterThanTen                       ; finds the lowest 
                                                            remainder bit (ie 1
                                                            234 -->4) and store
                                                            s it as a local var
                                                            iable
  319 00000204 FBB1 F3F2       UDIV             R3, R1, R2  ; (1234 ->123) and 
                                                            R3 has value 123
  320 00000208 FB03 F502       MUL              R5, R3, R2  ;R5 is 1230
  321 0000020C EBA1 0405       SUB              R4, R1, R5  ;R4 has the least s
                                                            ignificant digit (i
                                                            e 4)
  322 00000210 F004 04FF       AND              R4, #0x0FF  ;bitmask 
  323 00000214 F104 0430       ADD              R4, R4, #0x30 ;converts the las
                                                            t bit (ie 4) into A
                                                            SCII '4'
  324 00000218 9403            STR              R4, [SP, #lowRemainder1] ;store
                                                            s the ASCII value o
                                                            f lowest remainder 
                                                            in lowRemainder1
  325 0000021A E7FF            B                secondToLastBit
  326 0000021C         
  327 0000021C         secondToLastBit
  328 0000021C 9800            LDR              R0, [SP, #original] ;finds the 
                                                            second to lowest va
                                                            lue of R0 and puts 



ARM Macro Assembler    Page 9 


                                                            it as a local varia
                                                            ble (1234-->3)
  329 0000021E FBB0 F4F2       UDIV             R4, R0, R2  ;divides the origin
                                                            al value by 10 to e
                                                            ventually get the s
                                                            econd to last bit (
                                                            ie 1234->123)
  330 00000222 FBB4 F1F2       UDIV             R1, R4, R2  ;divides the divide
                                                            d by ten number by 
                                                            10 again to get sec
                                                            ond to last digit (
                                                            ie 123->12) and R1 
                                                            has value 12
  331 00000226 FB01 F202       MUL              R2, R1, R2  ;R2 = 120
  332 0000022A EBA4 0302       SUB              R3, R4, R2  ;R3 has second to l
                                                            ast digit (ie 123-1
                                                            20 ->3) and R3 has 
                                                            value 3
  333 0000022E F003 03FF       AND              R3, R3, #0x0FF
  334 00000232 F103 0330       ADD              R3, R3, #0x30 ; changes lowRema
                                                            inder2 to ASCII val
                                                            ue
  335 00000236 4618            MOV              R0, R3
  336 00000238 9004            STR              R0, [SP, #lowRemainder2] ;store
                                                            s ASCII value of 2n
                                                            d lowest remainder 
                                                            into lowRemainder2
  337 0000023A E7FF            B                thirdToLastBit
  338 0000023C         
  339 0000023C         thirdToLastBit                       ;finds the third to
                                                             lowest bit value o
                                                            f R0 and puts it as
                                                             a local variable (
                                                            ie 1234->2)
  340 0000023C 9800            LDR              R0, [SP, #original]
  341 0000023E 9A02            LDR              R2, [SP, #ten1]
  342 00000240 FBB0 F1F2       UDIV             R1, R0, R2  ;divides the origin
                                                            al by 10 (ie 1234->
                                                            123) and R1 has 123
                                                            
  343 00000244 FBB1 F3F2       UDIV             R3, R1, R2  ;divides the divide
                                                            d by ten by 10 (ie 
                                                            123->12) and R3 has
                                                             12
  344 00000248 FBB3 F4F2       UDIV             R4, R3, R2  ;divides the divide
                                                            d by ten by ten by 
                                                            10 (ie 12->1) and R
                                                            4 has 1
  345 0000024C FB04 F402       MUL              R4, R2      ; (ie 1*10 - >10)
  346 00000250 EBA3 0504       SUB              R5, R3, R4  ; R5 has the second
                                                             highest value digi
                                                            t (ie 1234 -->2) an
                                                            d R5 has 2
  347 00000254 F005 05FF       AND              R5, #0x0FF  ;bit masks the seco
                                                            nd highest value 
  348 00000258 F105 0530       ADD              R5, #0x30   ;converts the secon
                                                            d highest value to 
                                                            ASCII
  349 0000025C 9505            STR              R5, [SP, #lowRemainder3]



ARM Macro Assembler    Page 10 


  350 0000025E E7FF            B                highestBitValue
  351 00000260         
  352 00000260         highestBitValue                      ;finds the highest 
                                                            bit value of R0 and
                                                             stores it as a loc
                                                            al variable in the 
                                                            stack (ie 1234-->1)
                                                            
  353 00000260 9800            LDR              R0, [SP, #original]
  354 00000262 9A02            LDR              R2, [SP, #ten1]
  355 00000264 FBB0 F1F2       UDIV             R1, R0, R2  ;divides the origin
                                                            al by 10 (ie 1234->
                                                            123) and R1 has 123
                                                            
  356 00000268 FBB1 F3F2       UDIV             R3, R1, R2  ;divides the divide
                                                            d by ten by 10 (ie 
                                                            123->12) and R3 has
                                                             12
  357 0000026C FBB3 F4F2       UDIV             R4, R3, R2  ;divides the divide
                                                            d by ten by ten by 
                                                            10 (ie 12->1) and R
                                                            4 has 1
  358 00000270 4620            MOV              R0, R4
  359 00000272 F000 00FF       AND              R0, #0x0FF  ;masks R0 to have o
                                                            nly 8 bits for ASCI
                                                            I
  360 00000276 F100 0030       ADD              R0, #0x30   ;converts the highe
                                                            st bit in number to
                                                             ASCII
  361 0000027A F7FF FFFE       BL               ST7735_OutChar
  362 0000027E F7FF FFB6       BL               OutPutDecimal
  363 00000282 9805            LDR              R0, [SP, #lowRemainder3]
  364 00000284 F7FF FFFE       BL               ST7735_OutChar
  365 00000288 9804            LDR              R0, [SP, #lowRemainder2]
  366 0000028A F7FF FFFE       BL               ST7735_OutChar
  367 0000028E 9803            LDR              R0, [SP, #lowRemainder1]
  368 00000290 F7FF FFFE       BL               ST7735_OutChar
  369 00000294 E018            B                done
  370 00000296         
  371 00000296         
  372 00000296         
  373 00000296         allStars
  374 00000296 F04F 002A       MOV              R0, #0x2A   ;outputs star
  375 0000029A F7FF FFFE       BL               ST7735_OutChar
  376 0000029E F04F 002E       MOV              R0, #0x2E   ;outputs decimal
  377 000002A2 F7FF FFFE       BL               ST7735_OutChar
  378 000002A6 F04F 002A       MOV              R0, #0x2A   ;outputs star
  379 000002AA F7FF FFFE       BL               ST7735_OutChar
  380 000002AE F04F 002A       MOV              R0, #0x2A
  381 000002B2 F7FF FFFE       BL               ST7735_OutChar
  382 000002B6 F04F 002A       MOV              R0, #0x2A
  383 000002BA F7FF FFFE       BL               ST7735_OutChar
  384 000002BE E003            B                done
  385 000002C0         
  386 000002C0         outPutZero
  387 000002C0 F04F 0030       MOV              R0, #0x30
  388 000002C4 F7FF FFFE       BL               ST7735_OutChar
  389 000002C8         
  390 000002C8         done



ARM Macro Assembler    Page 11 


  391 000002C8 B008            ADD              SP, #32
  392 000002CA E8BD 5FF0       POP              {R4-R11, R12,LR}
  393 000002CE         
  394 000002CE 4770            BX               LR
  395 000002D0         
  396 000002D0         
  397 000002D0         ;* * * * * * * * End of LCD_OutFix * * * * * * * *
  398 000002D0         
  399 000002D0                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  400 000002D0                 END                          ; end of file
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\print.d -o.\print.o -I.\RTE\_SpaceInvaders -IC:\Keil_v5\ARM\PACK
\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\D
evice\Include\TM4C123 --predefine="__UVISION_VERSION SETA 526" --predefine="_RT
E_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --list=.\print.lst Print.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 24 in file Print.s
   Uses
      None
Comment: .text unused
GreaterThanTen 00000204

Symbol: GreaterThanTen
   Definitions
      At line 318 in file Print.s
   Uses
      At line 304 in file Print.s
Comment: GreaterThanTen used once
LCD_OutDec 00000008

Symbol: LCD_OutDec
   Definitions
      At line 38 in file Print.s
   Uses
      At line 21 in file Print.s
Comment: LCD_OutDec used once
LCD_OutFix 000001A8

Symbol: LCD_OutFix
   Definitions
      At line 257 in file Print.s
   Uses
      At line 22 in file Print.s
Comment: LCD_OutFix used once
OutPutDecimal 000001EE

Symbol: OutPutDecimal
   Definitions
      At line 306 in file Print.s
   Uses
      At line 362 in file Print.s
Comment: OutPutDecimal used once
Skip1 00000196

Symbol: Skip1
   Definitions
      At line 233 in file Print.s
   Uses
      At line 226 in file Print.s
Comment: Skip1 used once
Skip2 00000176

Symbol: Skip2
   Definitions
      At line 220 in file Print.s
   Uses
      At line 213 in file Print.s
Comment: Skip2 used once
Skip3 00000156

Symbol: Skip3



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 207 in file Print.s
   Uses
      At line 200 in file Print.s
Comment: Skip3 used once
Skip4 00000136

Symbol: Skip4
   Definitions
      At line 194 in file Print.s
   Uses
      At line 187 in file Print.s
Comment: Skip4 used once
Skip5 00000116

Symbol: Skip5
   Definitions
      At line 181 in file Print.s
   Uses
      At line 174 in file Print.s
Comment: Skip5 used once
Skip6 000000F6

Symbol: Skip6
   Definitions
      At line 168 in file Print.s
   Uses
      At line 161 in file Print.s
Comment: Skip6 used once
Skip7 000000D6

Symbol: Skip7
   Definitions
      At line 155 in file Print.s
   Uses
      At line 148 in file Print.s
Comment: Skip7 used once
Skip8 000000B6

Symbol: Skip8
   Definitions
      At line 142 in file Print.s
   Uses
      At line 135 in file Print.s
Comment: Skip8 used once
Skip9 00000096

Symbol: Skip9
   Definitions
      At line 129 in file Print.s
   Uses
      At line 123 in file Print.s
Comment: Skip9 used once
allNines 00000000

Symbol: allNines
   Definitions
      At line 28 in file Print.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 298 in file Print.s
Comment: allNines used once
allStars 00000296

Symbol: allStars
   Definitions
      At line 373 in file Print.s
   Uses
      At line 301 in file Print.s
Comment: allStars used once
checkIfInputGreaterThan9999 000001E0

Symbol: checkIfInputGreaterThan9999
   Definitions
      At line 297 in file Print.s
   Uses
      None
Comment: checkIfInputGreaterThan9999 unused
done 000002C8

Symbol: done
   Definitions
      At line 390 in file Print.s
   Uses
      At line 369 in file Print.s
      At line 384 in file Print.s

highestBitValue 00000260

Symbol: highestBitValue
   Definitions
      At line 352 in file Print.s
   Uses
      At line 350 in file Print.s
Comment: highestBitValue used once
loopStoreArray 0000002E

Symbol: loopStoreArray
   Definitions
      At line 83 in file Print.s
   Uses
      At line 117 in file Print.s
Comment: loopStoreArray used once
nines 00000004

Symbol: nines
   Definitions
      At line 31 in file Print.s
   Uses
      None
Comment: nines unused
noPass1 00000186

Symbol: noPass1
   Definitions
      At line 227 in file Print.s
   Uses
      At line 224 in file Print.s
Comment: noPass1 used once



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

noPass2 00000166

Symbol: noPass2
   Definitions
      At line 214 in file Print.s
   Uses
      At line 211 in file Print.s
Comment: noPass2 used once
noPass3 00000146

Symbol: noPass3
   Definitions
      At line 201 in file Print.s
   Uses
      At line 198 in file Print.s
Comment: noPass3 used once
noPass4 00000126

Symbol: noPass4
   Definitions
      At line 188 in file Print.s
   Uses
      At line 185 in file Print.s
Comment: noPass4 used once
noPass5 00000106

Symbol: noPass5
   Definitions
      At line 175 in file Print.s
   Uses
      At line 172 in file Print.s
Comment: noPass5 used once
noPass6 000000E6

Symbol: noPass6
   Definitions
      At line 162 in file Print.s
   Uses
      At line 159 in file Print.s
Comment: noPass6 used once
noPass7 000000C6

Symbol: noPass7
   Definitions
      At line 149 in file Print.s
   Uses
      At line 146 in file Print.s
Comment: noPass7 used once
noPass8 000000A6

Symbol: noPass8
   Definitions
      At line 136 in file Print.s
   Uses
      At line 133 in file Print.s
Comment: noPass8 used once
outPutZero 000002C0

Symbol: outPutZero



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 386 in file Print.s
   Uses
      None
Comment: outPutZero unused
secondToLastBit 0000021C

Symbol: secondToLastBit
   Definitions
      At line 327 in file Print.s
   Uses
      At line 325 in file Print.s
Comment: secondToLastBit used once
thirdToLastBit 0000023C

Symbol: thirdToLastBit
   Definitions
      At line 339 in file Print.s
   Uses
      At line 337 in file Print.s
Comment: thirdToLastBit used once
32 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

D_0 0000000C

Symbol: D_0
   Definitions
      At line 46 in file Print.s
   Uses
      At line 234 in file Print.s
Comment: D_0 used once
D_1 00000010

Symbol: D_1
   Definitions
      At line 47 in file Print.s
   Uses
      At line 221 in file Print.s
Comment: D_1 used once
D_2 00000014

Symbol: D_2
   Definitions
      At line 48 in file Print.s
   Uses
      At line 208 in file Print.s
Comment: D_2 used once
D_3 00000018

Symbol: D_3
   Definitions
      At line 49 in file Print.s
   Uses
      At line 195 in file Print.s
Comment: D_3 used once
D_4 0000001C

Symbol: D_4
   Definitions
      At line 50 in file Print.s
   Uses
      At line 182 in file Print.s
Comment: D_4 used once
D_5 00000020

Symbol: D_5
   Definitions
      At line 51 in file Print.s
   Uses
      At line 169 in file Print.s
Comment: D_5 used once
D_6 00000024

Symbol: D_6
   Definitions
      At line 52 in file Print.s
   Uses
      At line 156 in file Print.s
Comment: D_6 used once
D_7 00000028

Symbol: D_7



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 53 in file Print.s
   Uses
      At line 143 in file Print.s
Comment: D_7 used once
D_8 0000002C

Symbol: D_8
   Definitions
      At line 54 in file Print.s
   Uses
      At line 130 in file Print.s
Comment: D_8 used once
D_9 00000030

Symbol: D_9
   Definitions
      At line 55 in file Print.s
   Uses
      At line 121 in file Print.s
Comment: D_9 used once
arrayFrame 00000037

Symbol: arrayFrame
   Definitions
      At line 59 in file Print.s
   Uses
      At line 74 in file Print.s
      At line 107 in file Print.s

countOfNums 00000018

Symbol: countOfNums
   Definitions
      At line 17 in file Print.s
   Uses
      None
Comment: countOfNums unused
flag 00000034

Symbol: flag
   Definitions
      At line 56 in file Print.s
   Uses
      At line 68 in file Print.s
      At line 125 in file Print.s
      At line 127 in file Print.s
      At line 131 in file Print.s
      At line 138 in file Print.s
      At line 140 in file Print.s
      At line 144 in file Print.s
      At line 151 in file Print.s
      At line 153 in file Print.s
      At line 157 in file Print.s
      At line 164 in file Print.s
      At line 166 in file Print.s
      At line 170 in file Print.s
      At line 177 in file Print.s
      At line 179 in file Print.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 183 in file Print.s
      At line 190 in file Print.s
      At line 192 in file Print.s
      At line 196 in file Print.s
      At line 203 in file Print.s
      At line 205 in file Print.s
      At line 209 in file Print.s
      At line 216 in file Print.s
      At line 218 in file Print.s
      At line 222 in file Print.s
      At line 229 in file Print.s
      At line 231 in file Print.s

flexOriginal 00000004

Symbol: flexOriginal
   Definitions
      At line 12 in file Print.s
   Uses
      At line 269 in file Print.s
      At line 270 in file Print.s
      At line 303 in file Print.s
      At line 313 in file Print.s

index 00000035

Symbol: index
   Definitions
      At line 57 in file Print.s
   Uses
      At line 70 in file Print.s
      At line 108 in file Print.s
      At line 113 in file Print.s
      At line 115 in file Print.s

lowRemainder1 0000000C

Symbol: lowRemainder1
   Definitions
      At line 14 in file Print.s
   Uses
      At line 279 in file Print.s
      At line 280 in file Print.s
      At line 314 in file Print.s
      At line 324 in file Print.s
      At line 367 in file Print.s

lowRemainder2 00000010

Symbol: lowRemainder2
   Definitions
      At line 15 in file Print.s
   Uses
      At line 283 in file Print.s
      At line 284 in file Print.s
      At line 336 in file Print.s
      At line 365 in file Print.s

lowRemainder3 00000014



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols


Symbol: lowRemainder3
   Definitions
      At line 16 in file Print.s
   Uses
      At line 287 in file Print.s
      At line 288 in file Print.s
      At line 349 in file Print.s
      At line 363 in file Print.s

num 00000000

Symbol: num
   Definitions
      At line 43 in file Print.s
   Uses
      At line 79 in file Print.s
      At line 84 in file Print.s
      At line 90 in file Print.s
      At line 94 in file Print.s
      At line 97 in file Print.s

original 00000000

Symbol: original
   Definitions
      At line 11 in file Print.s
   Uses
      At line 264 in file Print.s
      At line 265 in file Print.s
      At line 312 in file Print.s
      At line 328 in file Print.s
      At line 340 in file Print.s
      At line 353 in file Print.s

result 00000008

Symbol: result
   Definitions
      At line 45 in file Print.s
   Uses
      At line 92 in file Print.s
      At line 99 in file Print.s
      At line 101 in file Print.s
      At line 106 in file Print.s

subtractee 00000004

Symbol: subtractee
   Definitions
      At line 44 in file Print.s
   Uses
      At line 81 in file Print.s
      At line 88 in file Print.s

ten 00000036

Symbol: ten
   Definitions



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

      At line 58 in file Print.s
   Uses
      At line 77 in file Print.s
      At line 85 in file Print.s
      At line 95 in file Print.s

ten1 00000008

Symbol: ten1
   Definitions
      At line 13 in file Print.s
   Uses
      At line 275 in file Print.s
      At line 276 in file Print.s
      At line 302 in file Print.s
      At line 341 in file Print.s
      At line 354 in file Print.s

24 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ST7735_OutChar 00000000

Symbol: ST7735_OutChar
   Definitions
      At line 19 in file Print.s
   Uses
      At line 124 in file Print.s
      At line 137 in file Print.s
      At line 150 in file Print.s
      At line 163 in file Print.s
      At line 176 in file Print.s
      At line 189 in file Print.s
      At line 202 in file Print.s
      At line 215 in file Print.s
      At line 228 in file Print.s
      At line 235 in file Print.s
      At line 311 in file Print.s
      At line 361 in file Print.s
      At line 364 in file Print.s
      At line 366 in file Print.s
      At line 368 in file Print.s
      At line 375 in file Print.s
      At line 377 in file Print.s
      At line 379 in file Print.s
      At line 381 in file Print.s
      At line 383 in file Print.s
      At line 388 in file Print.s

ST7735_OutString 00000000

Symbol: ST7735_OutString
   Definitions
      At line 20 in file Print.s
   Uses
      None
Comment: ST7735_OutString unused
2 symbols
394 symbols in table
